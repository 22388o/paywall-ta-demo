/*
 * ***********************************************************************
 *                                                                       *
 *  LightningJ                                                           *
 *                                                                       *
 *  This software is free software; you can redistribute it and/or       *
 *  modify it under the terms of the GNU Lesser General Public License   *
 *  (LGPL-3.0-or-later)                                                  *
 *  License as published by the Free Software Foundation; either         *
 *  version 3 of the License, or any later version.                      *
 *                                                                       *
 *  See terms of license at gnu.org.                                     *
 *                                                                       *
 *************************************************************************/
package org.lightningj.paywall.paywalltademo.paymenthandler;

import org.lightningj.paywall.paymenthandler.data.PerRequestPaymentData;
import org.lightningj.paywall.util.Base58;
import org.lightningj.paywall.vo.amount.Amount;
import org.lightningj.paywall.vo.amount.BTC;
import org.lightningj.paywall.vo.amount.CryptoAmount;

import javax.persistence.*;

/**
 * Demo payment data implementing the PerRequestPaymentData requirements
 * for payment flow to work.
 * It is a simple JPA Entity with following columns:
 * <ul>
 * <li>id: primary id in database</li>
 * <li>preImageHash: unique preImageHash generated with the order.</li>
 * <li>orderAmount: the orderAmount in satoshis for this payment</li>
 * <li>payPerRequest: If payment flow is for one request only..</li>
 * <li>executed: If related request already have been executed.</li>
 * </ul>
 */
@Entity
public class DemoPerRequestPaymentData implements PerRequestPaymentData {

    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Integer id;

    @Column(nullable = false)
    private String preImageHash;

    private long orderAmount;

    private boolean settled = false;

    private boolean payPerRequest = false;

    private boolean executed = false;

    /**
     *
     * @return Unique Id of database row.
     */
    public Integer getId() {
        return id;
    }

    /**
     *
     * @param id Unique Id of database row.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Unique identifier of a payment in the system and also used in LightningHandler
     * to identify an invoice. Should be generated by TokenGenerator when
     * creating an order and not set manually.
     *
     * @return the unique identifier of a payment.
     */
    @Override
    public byte[] getPreImageHash() {
        return Base58.decode(this.preImageHash);
    }

    /**
     * @param preImageHash unique identifier of a payment in the system and also used in LightningHandler
     *                     to identify an invoice. Should be generated by TokenGenerator when
     *                     creating an order and not set manually.
     */
    @Override
    public void setPreImageHash(byte[] preImageHash) {
        this.preImageHash = Base58.encodeToString(preImageHash);
    }

    /**
     * @return the requested amount for payment. This can be either a FiatAmount or CryptoAmount but
     * always make sure the systems configured CurrencyConverter supports this currency when converting
     * into a currency accepted by the LightningHandler later in the payment flow.
     */
    @Override
    public Amount getOrderAmount() {
        return new BTC(orderAmount);
    }

    /**
     * @param orderAmount the requested amount for payment. This can be either a FiatAmount or CryptoAmount but
     *                    always make sure the systems configured CurrencyConverter supports this currency when converting
     *                    into a currency accepted by the LightningHandler later in the payment flow.
     */
    @Override
    public void setOrderAmount(Amount orderAmount) {
        assert orderAmount instanceof CryptoAmount;
        this.orderAmount = ((CryptoAmount) orderAmount).getValue();
    }

    /**
     * @return true if related invoice have been settled in full.
     */
    @Override
    public boolean isSettled() {
        return this.settled;
    }

    /**
     * @param settled true if related invoice have been settled in full.
     */
    @Override
    public void setSettled(boolean settled) {
        this.settled = settled;
    }

    /**
     * @return flag indicating that this payment is for one request only. The implementation
     * can take the payPerRequest flag from the order request as guidance, but it is the PaymentHandler
     * that ultimately decides if payPerRequest should be set.
     */
    @Override
    public boolean isPayPerRequest() {
        return payPerRequest;
    }

    /**
     * @param payPerRequest flag indicating that this payment is for one request only. The implementation
     *                      can take the payPerRequest flag from the order request as guidance, but it is the PaymentHandler
     *                      that ultimately decides if payPerRequest should be set.
     */
    @Override
    public void setPayPerRequest(boolean payPerRequest) {
        this.payPerRequest = payPerRequest;
    }

    /**
     * @return true if related request have been executed, is set after successful processing
     * if a payed call and used to indicate that it cannot be processed again.
     */
    @Override
    public boolean isExecuted() {
        return executed;
    }

    /**
     * @param executed true if related request have been executed, is set after successful processing
     *                 if a payed call and used to indicate that it cannot be processed again.
     */
    @Override
    public void setExecuted(boolean executed) {
        this.executed = executed;
    }

    @Override
    public String toString() {
        return "DemoPaymentData{" +
                "id=" + id +
                ", preImageHash='" + preImageHash + '\'' +
                ", orderAmount=" + orderAmount +
                ", settled=" + settled +
                ", payPerRequest=" + payPerRequest +
                ", executed=" + executed +
                '}';
    }


}
